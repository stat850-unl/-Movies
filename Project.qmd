---
title: "Artists"
format: html
editor: visual
Names: Mahyar Madarshahain, Jing Wang.
---

## Python Code

-   Are there any states with a location quotient below 1.0 for artists?

```{python table-setup-py}
# Explicitly import pandas
import pandas as pd
from scipy import stats
import matplotlib.pyplot as plt

# Import the dataset
artist = pd.read_csv("artists.csv")


# Delete missing values
artist = artist.dropna()
""" Question1: Are there any states with a location quotient significantly below 1.0 for artists?"""


# Group by state and calculate the average location quotient for each state
average_location_quotient = artist.groupby('state')['location_quotient'].mean().reset_index()
#print(average_location_quotient)
# Visual analysis using a histogram
plt.figure(figsize=(10, 6))
plt.hist(average_location_quotient['location_quotient'], bins=20, edgecolor='black')
plt.title('Histogram of Average Location Quotients for Artists')
plt.xlabel('Average Location Quotient')
plt.ylabel('Frequency')
plt.show()

# Visual analysis using a box plot
plt.figure(figsize=(10, 6))
plt.boxplot(average_location_quotient['location_quotient'])
plt.title('Average Location Quotient Distribution for Artists')
plt.xlabel('Artists')
plt.ylabel('Average Location Quotient')
plt.show()


# Filter states with an average location quotient less than 1.0
states_below_1 = average_location_quotient[average_location_quotient['location_quotient'] < 1.0]
states_below_1

```

-   The top 10 state /territory has the highest number of artists, as indicated by the location quotient.

```{python table-setup-py2}
# Calculate the average location_quotient for each state
average_location_quotient = artist.groupby('state')['location_quotient'].mean()

# Sort states based on average location_quotient and get the top 10
top_10_states = average_location_quotient.sort_values(ascending=False).head(10)

# Display the top 10 states
print("Top 10 States with Highest Location Quotient:")
print(top_10_states)
```

```{r}
# Assuming you have loaded your dataset into a data frame named 'artist'
# Replace 'your_data.csv' with the actual file path if you are reading from a CSV file


# Load required libraries
library(shiny)
library(dplyr)
library(ggplot2)

# Import the dataset
artist <- read.csv("artists.csv")  # Replace with the actual file path
artist <- na.omit(artist)
# UI definition
ui <- fluidPage(
  titlePanel("Average Location Quotient for Each State and Top 10 States"),
  sidebarLayout(
    sidebarPanel(),
    mainPanel(
      tableOutput("averageTable"),
      plotOutput("barPlot")
    )
  )
)

# Server definition
server <- function(input, output) {
  
  # Calculate average location quotient for each state
  average_location_quotient <- artist %>%
    group_by(state) %>%
    summarize(average_location_quotient = mean(location_quotient))
  
  # Sort states based on average location quotient and get the top 10
  top_10_states <- average_location_quotient %>%
    arrange(desc(average_location_quotient)) %>%
    head(10)
  
  # Display the top 10 states
  output$averageTable <- renderTable({
    top_10_states
  })
  
  # Bar plot of average location quotient for each state
  output$barPlot <- renderPlot({
    ggplot(average_location_quotient, aes(x = state, y = average_location_quotient)) +
      geom_bar(stat = "identity", fill = "skyblue") +
      labs(title = "Average Location Quotient for Each State",
           x = "State",
           y = "Average Location Quotient") +
      theme_minimal() +
      theme(axis.text.x = element_text(angle = 90, hjust = 1))
  })
}

# Run the Shiny app
shinyApp(ui, server)


```

-   How does the racial diversity of artists vary across different states or territories? Are there states with a more diverse artist population than others?

```{r}
library(shiny)
library(tidyverse)
library(viridis)


# Define UI
ui <- fluidPage(
  titlePanel("Racial Diversity of Artists Across States"),
  
  sidebarLayout(
    sidebarPanel(
      selectInput("selected_state", "Select State", choices = unique(artist$state), selected = "Alabama"),
      # You can add more inputs here if needed
    ),
    
    mainPanel(
      plotOutput("barPlot")
    )
  )
)

# Define server
server <- function(input, output) {
  
  # Filter data based on selected state
  data_selected_state <- reactive({
    filter(artist, state == input$selected_state)
  })
  
  # Process data and create plot
  output$barPlot <- renderPlot({
    data_processed <- data_selected_state() %>%
      group_by(state, race) %>%
      summarise(artists_n = sum(artists_n)) %>%
      group_by(state) %>%
      mutate(percentage_of_artists = (artists_n / sum(artists_n)) * 100)
    
    # Create a bar plot using ggplot2
    ggplot(data_processed, aes(x = state, y = percentage_of_artists, fill = race)) +
      geom_bar(stat = "identity", position = "dodge") +
      labs(title = "Racial Diversity of Artists Across States",
           x = "State",
           y = "Percentage of Artists",
           fill = "Race") +
      theme_minimal() +
      theme(axis.text.x = element_text(angle = 0, hjust = 1)) +
      scale_fill_viridis(discrete = TRUE)
  })
}

# Run the Shiny app
shinyApp(ui, server)
```

## R Code

-   What is the overall distribution of artist types across different states or territories?

```{r}
# Load required libraries
library(shiny)
library(ggplot2)
library(readr)
library(stats)
library(dplyr)

# Import the dataset
artist <- read_csv("artists.csv")

# Display the first few rows of the dataset
head(artist)

# Delete missing values
artist <- na.omit(artist)

# Question 2 : What is the overall distribution of artist types across different states or territories?

# Filter the data to include only the relevant columns
subset <- artist %>% select(state, type)
# Calculate the overall distribution
distribution <- subset %>% group_by(state, type) %>% summarise(count = n())

# Display the overall distribution
print(distribution)

library(ggplot2)

library(tidyr)

# Pivot the data for heatmap
heatmap_data <- distribution %>%
  pivot_wider(names_from = "type", values_from = "count", values_fill = 0)

# Create a heatmap
ggplot(heatmap_data, aes(x = state, y = `Actors`, fill = `Actors`)) +
  geom_tile() +
  scale_fill_gradient(low = "red", high = "blue") +
  labs(title = "Distribution of Artist Types Across States",
       x = "State",
       y = "Artist Type") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

As shown in the above figure, while the heatmap is a very useful visualization, it also has its own disadvantages which are reflected from the above figure.

1.  Heatmaps rely on color to convey information, and misinterpretation of colors is a common issue. As shown in above, it is hard for the reviewers (even Mahyar and Jing) to interpret differences in shades. We also have difficulty distinguishing between similar colors. This is one reason that I decided to use another format to answer this question.
2.  Heatmaps are effective for showing overall patterns but may not provide detailed information on individual data points. if we want to analyze the specific values in one specific state, it is hard to read it directly from this heat table. This is the second reason that I need to use other format table to answer this question.
3.  Depending on the range of counts in my data, the color scale might not effectively represent the variations.
4.  we have many states or artist types as shown in the table, the labels on the axes (states and artist types) has become crowded and difficult to read. This is especially true whenI have a large dataset (51 states and lots of types of artists), and it is challenging to display all labels clearly.

Consider the specific goals of our analysis and the characteristics of our dataset when choosing a visualization method. Based on waht we learnt in the class, we want to create one shiny graph to answer this question. The R code is shown below:

```{r}

ui <- fluidPage(
  titlePanel("Artist Type Distribution"),
  sidebarLayout(
    sidebarPanel(
      selectInput("stateInput", "Select a state:", unique(distribution$state)),
      actionButton("plotButton", "Plot")
    ),
    mainPanel(
      tableOutput("resultTable"),
      plotOutput("barPlot"),
      plotOutput("pieChart")
    )
  )
)

server <- function(input, output) {
  state_data <- reactive({
    selected_state <- input$stateInput
    subset_for_state <- distribution[distribution$state == selected_state, ]
    subset_for_state
  })

  output$resultTable <- renderTable({
    state_data()
  })

  observeEvent(input$plotButton, {
    output$barPlot <- renderPlot({
      ggplot(state_data(), aes(x = type, y = count, fill = type)) +
        geom_bar(stat = "identity") +
        labs(title = paste("Distribution of Artist Types in", input$stateInput),
             x = "Artist Type",
             y = "Count") +
        theme_minimal() +
        theme(axis.text.x = element_text(angle = 45, hjust = 1))
    })

    output$pieChart <- renderPlot({
      ggplot(state_data(), aes(x = "", y = count, fill = type)) +
        geom_bar(stat = "pie") +
        labs(title = paste("Pie Chart of Artist Types in", input$stateInput),
             x = NULL,
             y = NULL) +
        theme_void() +
        coord_polar(theta = "y")
    })
  })
}

shinyApp(ui, server)
```

-   Is there a correlation between the percentage of artists in a state (artists_share) and the state's number of workers?

```{r}
# Assuming your dataframe is named "artist"
# Replace "your_data.csv" with the actual file path if you are reading from a CSV file

# Check the structure of your dataframe
str(artist)

# Calculate the correlation
correlation <- cor(artist$artists_share, artist$all_workers_n)

# Print the correlation
cat("Correlation between artists_share and all_workers_n:", correlation, "\n")

```

The correlation coefficient of approximately -0.0315 suggests a very weak negative correlation between the percentage of artists in a state (**`artists_share`**) and the state's number of workers (**`all_workers_n`**). Here are some interpretations:

1.  **Weak Negative Correlation:** The negative sign indicates that, on average, as the percentage of artists in a state increases, the state's number of workers tends to decrease slightly. However, the strength of this relationship is very weak.

2.  **Limited Predictive Power:** The correlation is close to zero, indicating that there is little linear association between the two variables. This means that the percentage of artists in a state is not a strong predictor or indicator of the total number of workers in that state.

3.  **Other Factors at Play:** The weak correlation suggests that factors other than the percentage of artists likely influence the total number of workers in a state. There may be various economic, demographic, or industry-specific factors that contribute to the overall workforce size.

4.  **Cautious Interpretation:** Correlation does not imply causation. Even though there is a weak correlation, it does not necessarily mean that the presence of artists directly causes a decrease in the number of workers or vice versa. Other confounding factors may be influencing the observed relationship.

In summary, while there is a statistical correlation, the practical significance of this correlation is very limited. It's essential to interpret correlation in the context of the specific data and consider other relevant factors when drawing conclusions about the relationship between variables.

```{r}
# Fisher's Exact Test:

#If the expected frequencies are too small, you might want to consider using Fisher's Exact Test, which is more appropriate for small sample sizes. In R, you can use fisher.test() for this purpose.

fisher_test <- fisher.test(table(artist$race, artist$state), simulate.p.value = TRUE)
print(fisher_test)

chisq_test <- chisq.test(table(artist$race, artist$state), correct = FALSE)
print(chisq_test)
# Print the test results
print(chisq_test)

```

The Fisher's Exact Test with simulated p-value and the Pearson's Chi-squared test both indicate a highly significant association between the race of artists and the state. Let's interpret each result:

1.  **Fisher's Exact Test:**

    -   The p-value obtained from the Fisher's Exact Test with simulated p-value is 0.0004998, which is less than the typical significance level of 0.05. This suggests strong evidence to reject the null hypothesis that there is no association between the race of artists and the state.

2.  **Pearson's Chi-squared Test:**

    -   The Pearson's Chi-squared test also provides a very low p-value of 2.6e-09, which is practically zero. Like the Fisher's Exact Test, this indicates strong evidence against the null hypothesis.

Both tests suggest that there is a significant association between the race of artists and the state. In practical terms, this means that the racial composition of artists varies significantly across different states. The next steps would involve investigating the nature of this association and understanding which specific races contribute more or less than expected in certain states.

Here are some possible next steps:

-   **Post-hoc Analysis:** If you find a significant association, you might want to perform post-hoc analysis or pairwise comparisons to identify which specific races and states contribute to the observed association.

-   **Interpretation:** Consider the practical significance of the association. Are there specific states where certain racial groups of artists are overrepresented or underrepresented compared to the overall population?

-   **Covariates:** If available, consider including covariates (additional variables) in the analysis to account for potential confounding factors that could influence the relationship.

-   **Explore Contributing Factors:** Investigate other factors (economic, cultural, etc.) that might explain the observed association.

Remember that statistical significance does not imply causation, and further investigation and domain knowledge are often necessary to understand the underlying reasons for the observed associations.

```{r}
# Create a contingency table
contingency_table <- table(artist$race, artist$state)

print(contingency_table)


# Convert the contingency table to a data frame
contingency_df <- as.data.frame(as.table(contingency_table))

print(contingency_df)

# Create an empty dataframe to store results
result_df <- data.frame()

# Loop through each combination of race and state
for (i in unique(contingency_df$Var1)) {
  for (j in unique(contingency_df$Var2)) {
    
    # Subset the data for the specific combination of race and state
    subset_data <- contingency_df[contingency_df$Var1 == i & contingency_df$Var2 == j, ]
    
    # Check if the subset_data has at least 2 rows
    if (nrow(subset_data) >= 2) {
      # Perform Fisher's Exact Test
      fisher_test <- fisher.test(subset_data$Freq)
      
      # Extract relevant information and store in result_df
      result_df <- rbind(result_df, data.frame(
        Var1 = i,
        Var2 = j,
        p.value = fisher_test$p.value
      ))
    }
  }
}

# Adjust p-values for multiple comparisons
result_df$p.adjusted <- p.adjust(result_df$p.value, method = "holm")

# Print the results
print(result_df)
```

-   The top 10 states which has the most number of Asian artists, and the related population percentage.

```{r}
# Calculate the racial composition for Asian artists
artist_asian_composition <- artist %>%
  filter(race == "Asian") %>%
  group_by(state, race) %>%
  summarise(artist_count = sum(artists_n, na.rm = TRUE), .groups = 'drop') %>%
  mutate(artist_percentage = artist_count / sum(artist_count, na.rm = TRUE))

# Calculate the overall racial composition of the Asian population in each state
population_asian_composition <- artist %>%
  filter(race == "Asian") %>%
  group_by(state, race) %>%
  summarise(population_count = sum(all_workers_n, na.rm = TRUE), .groups = 'drop') %>%
  mutate(population_percentage = population_count / sum(population_count, na.rm = TRUE))

# Merge the two datasets
merged_asian_data <- merge(artist_asian_composition, population_asian_composition, by = c("state", "race"), all = TRUE)
str(merged_asian_data)

# Sort merged_asian_data by artist_count in descending order
top_asian_states <- merged_asian_data[order(-merged_asian_data$artist_count), ]

# Select the top 10 states
top_10_asian_states <- head(top_asian_states, 10)

# Print the top 10 states with artist count and population percentage
print(top_10_asian_states[, c("state", "artist_count", "population_percentage")])



```

vdbf
