---
title: "Artists"
format: html
editor: visual
Names: Mahyar Madarshahain, Jing Wang.
---

## Python Code

-   Are there any states with a location quotient significantly below 1.0 for artists?

```{python table-setup-py}
# Explicitly import pandas
import pandas as pd
from scipy import stats
import matplotlib.pyplot as plt

# Import the dataset
artist = pd.read_csv("artists.csv")
artist.head()

# Delete missing values
artist = artist.dropna()
""" Question1: Are there any states with a location quotient significantly below 1.0 for artists?"""


# Filter the data to include only the relevant columns
subset = artist[['state', 'location_quotient']]

# Visual analysis using a histogram
plt.figure(figsize=(10, 6))
plt.hist(subset['location_quotient'], bins=20, edgecolor='black')
plt.title('Histogram of Location Quotients for Artists')
plt.xlabel('Location Quotient')
plt.ylabel('Frequency')
plt.show()


# Visual analysis using a box plot
plt.figure(figsize=(10, 6))
plt.boxplot(subset['location_quotient'])
plt.title('Location Quotient Distribution for Artists')
plt.xlabel('Artists')
plt.ylabel('Location Quotient')
plt.show()


# Statistical analysis using a one-sample t-test
# Set the significance level for the hypothesis test
alpha = 0.05
population_mean = 1.0  # The hypothesized mean (1.0)

# Perform a one-sample t-test
t_stat, p_value = stats.ttest_1samp(subset['location_quotient'], population_mean)

# Filter states with location quotient less than 1.0
states_below_1 = subset[subset['location_quotient'] < 1.0]

# Check if the p-value is less than the significance level
if p_value < alpha:
    print(f"States with a location quotient significantly below 1.0 (p-value: {p_value:.4f}): {len(states_below_1)} states")
    
    # Filter the original dataset based on the states with a significantly lower location quotient than 1.0
    filtered_dataset = artist[artist['state'].isin(states_below_1['state'])]
    print("Filtered Dataset:")
    print(filtered_dataset)
else:
    print(f"No significant evidence of location quotients below 1.0. Number of states below 1.0: {len(states_below_1)}")
```

-   The top 10 state /territory has the highest number of artists, as indicated by the location quotient.

```{python table-setup-py}
# Sort the dataset by location quotient in descending order
sorted_dataset = artist.sort_values(by='location_quotient', ascending=False)

# Get the top 10 states with the highest location quotient
top_10_states = sorted_dataset.head(10)
# Display the top 10 states
print("Top 10 States with the Highest Location Quotient:")
print(top_10_states[['state', 'location_quotient']])
```

## R Code

-   What is the overall distribution of artist types across different states or territories?

```{r}
# Load required libraries
library(readr)
library(stats)
library(dplyr)

# Import the dataset
artist <- read_csv("artists.csv")

# Display the first few rows of the dataset
head(artist)

# Delete missing values
artist <- na.omit(artist)

# Question 2 : What is the overall distribution of artist types across different states or territories?

# Filter the data to include only the relevant columns
subset <- artist %>% select(state, type)
# Calculate the overall distribution
distribution <- subset %>% group_by(state, type) %>% summarise(count = n())

# Display the overall distribution
print(distribution)

library(ggplot2)

library(tidyr)

# Pivot the data for heatmap
heatmap_data <- distribution %>%
  pivot_wider(names_from = "type", values_from = "count", values_fill = 0)

# Create a heatmap
ggplot(heatmap_data, aes(x = state, y = `Actors`, fill = `Actors`)) +
  geom_tile() +
  scale_fill_gradient(low = "red", high = "blue") +
  labs(title = "Distribution of Artist Types Across States",
       x = "State",
       y = "Artist Type") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

```{r}
library(shiny)
library(ggplot2)
library(readr)
library(stats)
library(dplyr)

ui <- fluidPage(
  titlePanel("Artist Type Distribution"),
  sidebarLayout(
    sidebarPanel(
      selectInput("stateInput", "Select a state:", unique(distribution$state)),
      actionButton("plotButton", "Plot")
    ),
    mainPanel(
      tableOutput("resultTable"),
      plotOutput("barPlot"),
      plotOutput("pieChart")
    )
  )
)

server <- function(input, output) {
  state_data <- reactive({
    selected_state <- input$stateInput
    subset_for_state <- distribution[distribution$state == selected_state, ]
    subset_for_state
  })

  output$resultTable <- renderTable({
    state_data()
  })

  observeEvent(input$plotButton, {
    output$barPlot <- renderPlot({
      ggplot(state_data(), aes(x = type, y = count, fill = type)) +
        geom_bar(stat = "identity") +
        labs(title = paste("Distribution of Artist Types in", input$stateInput),
             x = "Artist Type",
             y = "Count") +
        theme_minimal() +
        theme(axis.text.x = element_text(angle = 45, hjust = 1))
    })

    output$pieChart <- renderPlot({
      ggplot(state_data(), aes(x = "", y = count, fill = type)) +
        geom_bar(stat = "pie") +
        labs(title = paste("Pie Chart of Artist Types in", input$stateInput),
             x = NULL,
             y = NULL) +
        theme_void() +
        coord_polar(theta = "y")
    })
  })
}

shinyApp(ui, server)
```
